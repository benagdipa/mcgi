name: Reset Permissions

on:
  workflow_dispatch:
    inputs:
      email:
        description: 'Email of the user to assign super-admin role (optional)'
        required: false
        default: 'benedick.agdipa@mcgi.org.au'

jobs:
  reset-permissions:
    runs-on: ubuntu-latest
    steps:
      - name: Execute permission reset via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Navigate to the project directory
            cd /home/customer/mcgi
            
            # Create the reset script
            cat > reset_permissions.php << 'EOL'
            <?php
            $servername = 'localhost';
            $username = '${{ secrets.DB_USERNAME }}';
            $password = '${{ secrets.DB_PASSWORD }}';
            $dbname = '${{ secrets.DB_DATABASE }}';
            
            // Create connection
            $conn = new mysqli($servername, $username, $password, $dbname);
            
            // Check connection
            if ($conn->connect_error) {
                die("Connection failed: " . $conn->connect_error);
            }
            
            // Define all permissions
            $permissions = [
                // Blog Permissions
                'create blog',
                'edit blog',
                'delete blog',
                'view blog',
                
                // Event Permissions
                'create event',
                'edit event',
                'delete event',
                'view event',
                
                // Location Permissions
                'create location',
                'edit location',
                'delete location',
                'view location',
                
                // User Permissions
                'create user',
                'edit user',
                'delete user',
                'view user',
                
                // Role Permissions
                'create role',
                'edit role',
                'delete role',
                'view role',
                
                // Album Permissions
                'create album',
                'edit album',
                'delete album',
                'view album',
                
                // Banner Permissions
                'create banner',
                'edit banner',
                'delete banner',
                'view banner',
                
                // Email Template Permissions
                'create email-template',
                'edit email-template',
                'delete email-template',
                'view email-template',
                
                // Dashboard Permission
                'access dashboard',
                
                // Admin Section Permission
                'access admin',
                
                // Custom permissions for this application
                'manage settings',
                'manage services',
                'manage service times',
                'manage prayer meetings',
                'manage thanksgiving services',
                'manage worship services',
            ];
            
            // Create permissions if they don't exist
            $createdCount = 0;
            foreach ($permissions as $permissionName) {
                // Check if permission already exists
                $sql = "SELECT id FROM permissions WHERE name = '$permissionName'";
                $result = $conn->query($sql);
                
                if ($result->num_rows == 0) {
                    // Create the permission
                    $sql = "INSERT INTO permissions (name, guard_name, created_at, updated_at) 
                            VALUES ('$permissionName', 'web', NOW(), NOW())";
                    
                    if ($conn->query($sql) === TRUE) {
                        echo "Created permission: $permissionName\n";
                        $createdCount++;
                    } else {
                        echo "Error creating permission $permissionName: " . $conn->error . "\n";
                    }
                } else {
                    echo "Permission $permissionName already exists\n";
                }
            }
            
            echo "Created $createdCount new permissions\n";
            
            // Now get the super-admin role ID
            $sql = "SELECT id FROM roles WHERE name = 'super-admin'";
            $result = $conn->query($sql);
            
            if ($result->num_rows == 0) {
                // Create the super-admin role if it doesn't exist
                $sql = "INSERT INTO roles (name, guard_name, created_at, updated_at) VALUES ('super-admin', 'web', NOW(), NOW())";
                if ($conn->query($sql) === TRUE) {
                    echo "Super-admin role created successfully\n";
                    $superAdminRoleId = $conn->insert_id;
                } else {
                    die("Error creating super-admin role: " . $conn->error);
                }
            } else {
                $row = $result->fetch_assoc();
                $superAdminRoleId = $row['id'];
                echo "Found super-admin role with ID: $superAdminRoleId\n";
            }
            
            // Get all permission IDs
            $sql = "SELECT id FROM permissions";
            $result = $conn->query($sql);
            
            $permissionIds = [];
            while($row = $result->fetch_assoc()) {
                $permissionIds[] = $row['id'];
            }
            
            // Clear existing permissions first
            $sql = "DELETE FROM role_has_permissions WHERE role_id = $superAdminRoleId";
            if ($conn->query($sql) === TRUE) {
                echo "Cleared existing permissions for super-admin role\n";
            } else {
                echo "Error clearing permissions: " . $conn->error . "\n";
            }
            
            // Add all permissions to the super-admin role
            $count = 0;
            foreach ($permissionIds as $permissionId) {
                $sql = "INSERT INTO role_has_permissions (permission_id, role_id) VALUES ($permissionId, $superAdminRoleId)";
                if ($conn->query($sql) === TRUE) {
                    $count++;
                } else {
                    echo "Error assigning permission $permissionId: " . $conn->error . "\n";
                }
            }
            echo "Assigned $count permissions to the super-admin role\n";
            
            // Ensure user has the super-admin role
            $userEmail = '${{ github.event.inputs.email }}' ?: 'benedick.agdipa@mcgi.org.au';
            echo "Processing user: $userEmail\n";
            
            $sql = "SELECT id FROM users WHERE email = '$userEmail'";
            $result = $conn->query($sql);
            
            if ($result->num_rows == 0) {
                echo "User with email '$userEmail' not found\n";
            } else {
                $row = $result->fetch_assoc();
                $userId = $row['id'];
                
                // Clear existing roles
                $sql = "DELETE FROM model_has_roles WHERE model_id = $userId AND model_type = 'App\\\\Models\\\\User'";
                if ($conn->query($sql) === TRUE) {
                    echo "Cleared existing roles for user $userId\n";
                } else {
                    echo "Error clearing roles: " . $conn->error . "\n";
                }
                
                // Assign super-admin role
                $sql = "INSERT INTO model_has_roles (role_id, model_id, model_type) VALUES ($superAdminRoleId, $userId, 'App\\\\Models\\\\User')";
                if ($conn->query($sql) === TRUE) {
                    echo "Assigned super-admin role to user $userId\n";
                } else {
                    echo "Error assigning role: " . $conn->error . "\n";
                }
                
                // Also assign all permissions directly to the user
                // Clear existing permissions first
                $sql = "DELETE FROM model_has_permissions WHERE model_id = $userId AND model_type = 'App\\\\Models\\\\User'";
                if ($conn->query($sql) === TRUE) {
                    echo "Cleared existing permissions for user $userId\n";
                } else {
                    echo "Error clearing user permissions: " . $conn->error . "\n";
                }
                
                // Add all permissions to the user
                $userPermCount = 0;
                foreach ($permissionIds as $permissionId) {
                    $sql = "INSERT INTO model_has_permissions (permission_id, model_id, model_type) VALUES ($permissionId, $userId, 'App\\\\Models\\\\User')";
                    if ($conn->query($sql) === TRUE) {
                        $userPermCount++;
                    } else {
                        echo "Error assigning permission $permissionId to user: " . $conn->error . "\n";
                    }
                }
                echo "Assigned $userPermCount permissions directly to user $userId\n";
            }
            
            $conn->close();
            echo "Done! Permissions reset completed.\n";
            EOL
            
            # Execute the script
            php reset_permissions.php
            
            # Clear Laravel cache
            php artisan cache:clear
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear
            
            # Remove the temporary script
            rm reset_permissions.php
            
            echo "Permissions reset completed successfully!" 