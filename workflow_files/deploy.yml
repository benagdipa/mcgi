name: Deploy to Siteground
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, gd, xml, zip, bcmath, pdo_mysql
          coverage: none

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction

      # Since Siteground doesn't have npm, we need to build assets locally and commit them
      # These steps are now only for local testing of the deployment workflow
      # They can be uncommented if you want to build assets during CI instead of committing them
      # - name: Install Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '18'
      #
      # - name: Install NPM dependencies
      #   run: npm ci
      #
      # - name: Build assets
      #   run: npm run build

      - name: Prepare for deployment
        run: |
          # Create .env file for production
          cp .env.example .env
          php artisan key:generate
          
          # Create deployment directory
          mkdir -p deployment
          
          # Exclude unnecessary files and directories from deployment
          rsync -av --exclude='.git' \
                  --exclude='.github' \
                  --exclude='node_modules' \
                  --exclude='tests' \
                  --exclude='storage/framework/cache' \
                  --exclude='storage/framework/sessions' \
                  --exclude='storage/framework/views' \
                  --exclude='storage/logs' \
                  ./ deployment/

      - name: Deploy to Siteground via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Navigate to the web directory
            cd /home/customer/mcgi
            
            # Create backup directory if it doesn't exist
            mkdir -p backup
            
            # Backup current version before deployment
            timestamp=$(date +"%Y%m%d_%H%M%S")
            echo "Creating backup with timestamp: $timestamp"
            tar -czf backup/backup_${timestamp}.tar.gz public app bootstrap config database resources routes vendor composer.json composer.lock
            
            # Clear the storage directory for fresh deployment
            rm -rf /home/customer/mcgi/storage/framework/cache/*
            rm -rf /home/customer/mcgi/storage/framework/sessions/*
            rm -rf /home/customer/mcgi/storage/framework/views/*
            rm -rf /home/customer/mcgi/storage/logs/*

      - name: Upload deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "deployment/*"
          target: "/home/customer/mcgi/temp_deploy"
          strip_components: 1

      - name: Finalize deployment and run migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Move new files into place
            cd /home/customer/mcgi
            rsync -a temp_deploy/ .
            rm -rf temp_deploy
            
            # Set proper permissions
            find /home/customer/mcgi -type d -exec chmod 755 {} \;
            find /home/customer/mcgi -type f -exec chmod 644 {} \;
            chmod 755 /home/customer/mcgi/artisan
            
            # Ensure storage directories are writable
            chmod -R 775 /home/customer/mcgi/storage
            chmod -R 775 /home/customer/mcgi/bootstrap/cache
            
            # Update database
            php artisan migrate --force
            
            # Run database seeders for permissions
            php artisan db:seed --class=RoleAndPermissionSeeder --force
            php artisan db:seed --class=SuperAdminSeeder --force
            
            # Clear caches
            php artisan optimize:clear
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            
            echo "Deployment completed successfully!" 